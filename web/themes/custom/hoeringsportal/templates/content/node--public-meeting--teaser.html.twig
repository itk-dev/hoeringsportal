{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{# Set variables depending on node type. #}
{% set content_state = content.field_content_state['#items'].value %}
{% set type = content.field_type[0]['#plain_text'] %}
{% set project = content.field_project_reference[0]['#plain_text'] %}
{% set dates_delta = public_meeting_context.upcoming|first.name %}
{% set url = path('hoeringsportal_public_meeting.public_meeting_date', {node: node.id, dates_delta}) %}

<a href="{{ url }}" class="activity-teaser-inner activity-teaser-link-wrap text-decoration-none">
  {% set overlay_text = null %}

  {# Get meeting time.

    If we have upcoming (pretix) events, we use the first one. Otherwise we use
    field_last_meeting_time which will match the last pretix event and will also
    be set on public meetings not using pretix. #}

  {% set meeting_time = null %}
  {% if public_meeting_context.upcoming is not empty %}
    {% set meeting_time = public_meeting_context.upcoming|first.time_from %}
  {% else %}
    {% set meeting_time = content.field_last_meeting_time['#items'].value %}
  {% endif %}

  {% if meeting_time %}
    <div class="activity-teaser-splash">
      <div class="splash splash-date">
        {# Alter splash display depending on content state in relation with deadline. #}
        {% if (content_state == 'upcoming') %}
          <div class="splash-label">{{ 'Public meeting'|t }}</div>
          <div class="splash-date-day p-1">{{ meeting_time|date('d') }}</div>
          <div class="splash-date-month">{{ meeting_time|date('M')|t }}</div>
        {% elseif (content_state == 'finished') %}
          <div class="splash-label">{{ 'Finished'|t }}</div>
          <div class="splash-date-day"><i class="fa-solid fa-check-circle"></i></div>
          <div class="splash-date-month"></div>
          {% set overlay_text = 'Finished'|t %}
          {% set overlay_sub_text = meeting_time|date('U')|format_date('hoeringsportal_date') %}
        {% endif %}
      </div>
    </div>
  {% endif %}

  {% if (content.field_public_meeting_cancelled['#items'].value == 1) %}
    {% set overlay_text = 'Cancelled'|t %}
  {% endif %}

  <div class="activity-teaser-image">
    {{ content.field_media_image_single }}
    {# Add overlay when passed or upcoming #}
    {% if overlay_text %}
      <span class="activity-teaser-overlay">
        <span class="activity-teaser-overlay--text {{ overlay_text_color }}">
          {{ overlay_text }}
          {% if (overlay_sub_text) %}
            <div class="activity-teaser-overlay--sub-text">{{ overlay_sub_text }}</div>
          {% endif %}
        </span>
      </span>
    {% endif %}
  </div>

  <div{{ attributes.addClass('activity-teaser-content') }}>
    <p class="activity-teaser-title">{{ label[0]['#context'].value|length > 40 ? label[0]['#context'].value|slice(0, 40) ~ '...' : label }}</p>
    <div class="activity-teaser-description">
      {{ content.field_teaser[0]['#context'].value|length > 95 ? content.field_teaser[0]['#context'].value|slice(0, 95) ~ '...' : content.field_teaser }}
    </div>
  </div>

  <div class="activity-teaser-info">
    <span class="activity-teaser-meta-wrapper">
      {% if type is not empty %}
        <span class="activity-teaser-type">{{ type }}</span>
      {% endif %}
      <span class="activity-teaser-area is-comma-separated">{{ content.field_area }}</span>
    </span>
    <span class="activity-teaser-link "><i class="fa-solid fa-arrow-right float-right"></i></span>
  </div>
</a>
