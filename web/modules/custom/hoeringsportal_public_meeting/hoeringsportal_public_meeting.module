<?php

/**
 * @file
 * Module for public meeting content type.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\itk_pretix\Pretix\EventHelper;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 */
function hoeringsportal_public_meeting_theme() {
  return [
    'hoeringsportal_public_meeting_summary' => [
      'template' => 'hoeringsportal-public-meeting-summary',
      'variables' => [
        'pretix_signup' => NULL,
        'signup_deadline' => NULL,
        'node' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Set last meeting time for public meeting, based on Pretix field time_to
 * values.
 */
function hoeringsportal_public_meeting_node_presave(NodeInterface $node) {
  if (Drupal::currentUser()->isAuthenticated() && $node->bundle() === 'public_meeting') {
    $pretix_field_name = 'field_pretix_dates';
    $first_meeting_field_name = 'field_first_meeting_time';
    $last_meeting_time_field_name = 'field_last_meeting_time';
    $last_meeting_time_end_field_name = 'field_last_meeting_time_end';
    $pretix_field = $node->hasField($pretix_field_name) ? $node->get($pretix_field_name) : NULL;
    $first_meeting = $node->hasField($first_meeting_field_name) ? $node->get($first_meeting_field_name) : NULL;
    $last_meeting = $node->hasField($last_meeting_time_field_name) ? $node->get($last_meeting_time_field_name) : NULL;
    $format = DateTimeItemInterface::DATETIME_STORAGE_FORMAT;
    if ('pretix' === $node->field_signup_selection->value) {
      if ($pretix_field) {
        $pretix_type = $pretix_field->getFieldDefinition()->getType();
        if ($pretix_type == 'pretix_date') {
          if ($first_meeting && $last_meeting) {
            if ($pretix_field->count() > 0) {
              $first_time = NULL;
              $last_time = NULL;
              /** @var \Drupal\itk_pretix\Plugin\Field\FieldType\PretixDate $date */
              foreach ($pretix_field as $date) {
                if (NULL === $first_time || $date->time_from < $first_time) {
                  $first_time = $date->time_from;
                }

                if (NULL === $last_time || $date->time_to > $last_time) {
                  $last_time = $date->time_to;
                }
              }

              $node->set($first_meeting_field_name, $first_time->format($format, ['timezone' => 'UTC']));
              $node->set($last_meeting_time_field_name, $last_time->format($format, ['timezone' => 'UTC']));
              $node->set($last_meeting_time_end_field_name, $last_time->format($format, ['timezone' => 'UTC']));
            }
          }
        }
      }
    }

    if (isset($node->original)) {
      // If cancelled value changed.
      if ((int) $node->field_public_meeting_cancelled->value !== (int) $node->original->field_public_meeting_cancelled->value) {
        if ($node->field_public_meeting_cancelled->value > 0) {
          $now = new DateTime('now', new DateTimeZone('UTC'));
          $node->set('field_cancelled_date', $now->format($format));
        }
        else {
          if (!$node->get('field_cancelled_date')->isEmpty()) {
            $node->get('field_cancelled_date')->removeItem(0);
          }
          if (!$node->get('field_cancelled_text')->isEmpty()) {
            $node->get('field_cancelled_text')->removeItem(0);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Change the display of the form depending on signup selection.
 */
function hoeringsportal_public_meeting_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_public_meeting_edit_form' || $form_id == 'node_public_meeting_form') {
    $signUpPretix = [':input[name="field_signup_selection"]' => ['value' => 'pretix']];
    $signUpManual = [':input[name="field_signup_selection"]' => ['value' => 'manual']];
    $signUpHidden = [':input[name="field_hidden_signup[value]"]' => ['checked' => TRUE]];

    $node = $form_state->getFormObject()->getEntity();
    if ('pretix' === $node->field_signup_selection->value) {
      $cancelLink = hoeringsportal_public_meeting_get_cancel_link($node);
      $form['field_public_meeting_cancelled']['#prefix'] = '<div class="messages messages--warning">' . t('Note: If this public meeting is cancelled you should go to @cancelLink to cancel all orders.', ['@cancelLink' => $cancelLink]) . '</div>';
    }

    $form['field_cancelled_date']['#disabled'] = TRUE;

    $form['field_registration_deadline']['#states'] = [
      'visible' => $signUpManual,
    ];
    $form['field_last_meeting_time']['#states'] = [
      'visible' => $signUpManual,
    ];
    $form['field_last_meeting_time_end']['#states'] = [
      'visible' => $signUpManual,
    ];

    _hoeringsportal_public_meeting_set_states($form['field_pretix_dates'], [
      'required' => $signUpPretix,
      'visible' => $signUpPretix,
    ]);

    // Show pretix sub-event shop urls only when sign-up is hidden.
    foreach (Element::children($form['field_pretix_dates']['widget']) as $key) {
      if (isset($form[$key]['pretix_links']['pretix_subevent_shop_url'])) {
        $form[$key]['pretix_links']['pretix_subevent_shop_url']['#states'] = [
          'visible' => $signUpHidden,
        ];
      }
    }

    _hoeringsportal_public_meeting_set_states($form['field_pretix_event_settings'], [
      'required' => $signUpPretix,
      'visible' => $signUpPretix,
    ]);

    $form['field_signup_link']['#states'] = [
      'visible' => $signUpManual,
    ];
    $form['field_signup_text']['#states'] = [
      'visible' => $signUpManual,
    ];

    $form['#validate'][] = 'hoeringsportal_public_meeting_form_validate';

    $meeting = $form_state->getFormObject()->getEntity();
    if (NULL !== $meeting->id()) {
      // Lock sign-up type on existing meeting.
      $form['field_signup_selection']['#disabled'] = TRUE;
    }

    $form['#after_build'][] = 'hoeringsportal_public_meeting_alter_form_after_build';

    $form['#attached']['library'][] = 'hoeringsportal_public_meeting/public-meeting-form';
    $form['field_area']['widget']['#description_display'] = 'before';
  }
}

/**
 * Set states on an element and all sub-elements.
 *
 * @param array $element
 *   The element.
 * @param array $states
 *   The states.
 */
function _hoeringsportal_public_meeting_set_states(array &$element, array $states) {
  // Mark all but last (i.e. the “extra“; cf.
  // https://www.drupal.org/project/drupal/issues/2980806) pretix date as
  // required.
  if ('field_pretix_dates' === ($element['#field_name'] ?? NULL)) {
    $numericKeys = array_filter(array_keys($element), 'is_numeric');
    // Throw away largest key.
    sort($numericKeys);
    array_pop($numericKeys);
    foreach ($numericKeys as $key) {
      _hoeringsportal_public_meeting_set_states($element[$key], $states);
    }

    return;
  }

  if (isset($element['#type']) && 'hidden' !== $element['#type']) {
    $element['#states'] = $states;
  }
  foreach (Element::children($element) as $child) {
    _hoeringsportal_public_meeting_set_states($element[$child], $states);
  }
}

/**
 * After build function for form in order to have all parts of the date fields.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return array
 *   The altered form.
 */
function hoeringsportal_public_meeting_alter_form_after_build(array $form, FormStateInterface &$form_state) {
  // Add custom field validation for last meeting.
  array_unshift($form['field_last_meeting_time']['widget'][0]['value']['#element_validate'], 'hoeringsportal_public_meeting_last_meeting_validate');
  array_unshift($form['field_last_meeting_time_end']['widget'][0]['value']['#element_validate'], 'hoeringsportal_public_meeting_last_meeting_end_validate');
  return $form;
}

/**
 * Custom validation function to ensure that a last_meeting_time is always set.
 *
 * @param array $element
 *   The element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function hoeringsportal_public_meeting_last_meeting_validate(array $element, FormStateInterface &$form_state) {
  $signup_selection = $form_state->getValue('field_signup_selection')[0]['value'];
  if ($signup_selection == 'manual') {
    $last_time_values = $form_state->getValue('field_last_meeting_time')[0]['value'];
    if (empty($last_time_values['object'])) {
      $form_state->setErrorByName('field_last_meeting_time',
        t('Please enter a value!'));
    }
  }
}

/**
 * Custom validation function to ensure that last_meeting_time_end is set.
 *
 * @param array $element
 *   The element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function hoeringsportal_public_meeting_last_meeting_end_validate(array $element, FormStateInterface &$form_state) {
  $signup_selection = $form_state->getValue('field_signup_selection')[0]['value'];
  if ($signup_selection == 'manual') {
    $last_time_end_values = $form_state->getValue('field_last_meeting_time_end')[0]['value'];
    if (empty($last_time_end_values['object'])) {
      $form_state->setErrorByName('field_last_meeting_time_end',
        t('Please enter a value!'));
    }
  }
}

/**
 * Validation function for public meeting form.
 *
 * @param array $element
 *   The element.
 * @param \Drupal\Core\Form\FormStateInterface $formState
 *   The form state.
 */
function hoeringsportal_public_meeting_form_validate(array $element, FormStateInterface $formState) {
  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $formState->getFormObject()->getEntity();
  $isNew = NULL === $entity->id();
  $now = new DrupalDateTime();

  $signUpType = $formState->getValue('field_signup_selection')[0]['value'];
  if ('pretix' === $signUpType) {
    $dates = $formState->getValue('field_pretix_dates');

    if (!empty($registration_deadline) && !empty($dates)) {
      $meeting_start_time = reset($dates)['time_from_value'];
      if ($isNew && $meeting_start_time < $now) {
        $formState->setErrorByName('field_pretix_dates', t('The meeting time must not be in the past.'));
      }
    }

    foreach ($dates as $delta => $date) {
      if (!is_array($date)) {
        // Handle “Add another item“.
        continue;
      }

      // We require at least one pretix date.
      // We allow empty values on additional dates only if all values are empty.
      if ($delta > 0
        && empty($date['location'])
        && empty($date['address'])
        && empty($date['time_from_value'])
        && empty($date['time_to_value'])
        && empty($date['spots'])) {
        continue;
      }

      $namePrefix = 'field_pretix_dates][' . $delta . '][';
      if (empty($date['location'])) {
        $formState->setErrorByName($namePrefix . 'location', t('Please enter a location'));
      }
      if (empty($date['address'])) {
        $formState->setErrorByName($namePrefix . 'address', t('Please enter an address'));
      }
      if (empty($date['time_from_value'])) {
        $formState->setErrorByName($namePrefix . 'time_from_value', t('Please enter a start time'));
      }
      if (empty($date['time_to_value'])) {
        $formState->setErrorByName($namePrefix . 'time_to_value', t('Please enter an end time'));
      }
      if (empty($date['spots'])) {
        $formState->setErrorByName($namePrefix . 'spots', t('Please enter number of spots'));
      }
    }
  }
  elseif ('manual' === $signUpType) {
    /** @var \Drupal\Core\Datetime\DrupalDateTime $registration_deadline */
    $registration_deadline = $formState->getValue('field_registration_deadline')[0]['value'];

    if (empty($registration_deadline)) {
      $formState->setErrorByName('field_registration_deadline', t('The registration deadline is required.'));
    }

    // Validate some dates on new meetings.
    if ($isNew && $registration_deadline < $now) {
      $formState->setErrorByName('field_registration_deadline', t('The registration deadline must not be in the past.'));
    }

    $meeting_start_time = $formState->getValue('field_last_meeting_time')[0]['value'];
    if ($isNew && $meeting_start_time < $now) {
      $formState->setErrorByName('field_last_meeting_time', t('The meeting time must not be in the past.'));
    }
    if ($meeting_start_time < $registration_deadline) {
      $formState->setErrorByName('field_registration_deadline', t('The registration deadline must not be after the meeting starts.'));
    }
    $meeting_start_time_end = $formState->getValue('field_last_meeting_time_end')[0]['value'];
    if ($meeting_start_time_end <= $meeting_start_time) {
      $formState->setErrorByName('field_last_meeting_time_end', t('The meeting end time must be after the start time.'));
    }
  }
}

/**
 * Implements hook_itk_pretix_shop_live_alter().
 */
function hoeringsportal_public_meeting_itk_pretix_shop_live_alter(&$live, NodeInterface $node) {
  /** @var \Drupal\hoeringsportal_public_meeting\Helper\PublicMeetingHelper $helper */
  $helper = \Drupal::service('hoeringsportal_public_meeting.public_meeting_helper');
  // Set pretix event to not live if event is cancelled.
  if ($helper->isCancelled($node)) {
    $live = FALSE;
  }
}

/**
 * Create a cancel link for use in warning message.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node to work on.
 *
 * @return \Drupal\Component\Render\FormattableMarkup
 *   The link to a pretix cancel event page.
 */
function hoeringsportal_public_meeting_get_cancel_link(NodeInterface $node) {
  // Create cancel link.
  /** @var \Drupal\itk_pretix\Pretix\EventHelper $helper */
  $helper = \Drupal::service(EventHelper::class);
  $info = $helper->loadPretixEventInfo($node);
  $pretix_event_url = $info['data']['pretix_event_url'] ?? '';

  // If no event slug is set in config we must assume default.
  $cancelUrl = $pretix_event_url . 'cancel';

  // Create html for message.
  $cancelLink = new FormattableMarkup(
    '<a href="@cancelUrl" target="_blank">@cancelUrl</a>',
    ['@cancelUrl' => $cancelUrl]
  );

  return $cancelLink;
}

/**
 * Implements hook_ENTITY_TYPE_view() for node entities.
 */
function hoeringsportal_public_meeting_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getType() == 'public_meeting') {
    $view_mode_change_title = [
      'full',
    ];
    $content_state = $entity->field_content_state->value;
    $cancelled = $entity->field_public_meeting_cancelled->value;
    if (in_array($view_mode, $view_mode_change_title)) {
      $state = '';
      if ($content_state == 'finished') {
        $state = ' (' . t('Hearing deadline has passed') . ')';
      }

      if ($cancelled) {
        $state = ' (' . t('Public meeting cancelled') . ')';
      }

      $title = $build['title'][0]['#context']['value'];
      $new_title = $title . $state;
      $build['title'][0]['#context']['value'] = $new_title;
    }
  }
}

/**
 * Implements hook_preprocess().
 *
 * @see \Drupal\hoeringsportal_public_meeting\Helper\PublicMeetingHelper::preprocess()
 */
function hoeringsportal_public_meeting_preprocess(&$variables, $hook): void {
  \Drupal::service('hoeringsportal_public_meeting.public_meeting_helper')->preprocess($variables, $hook);
}
